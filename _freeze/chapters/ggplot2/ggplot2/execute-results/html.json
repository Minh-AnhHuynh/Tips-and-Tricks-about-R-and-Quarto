{
  "hash": "19cad446543d463dafee5d30454bb46f",
  "result": {
    "markdown": "# ggplot2\n\n## Non Standard Evaluation - Programming with ggplot2\n\n### Problem with programming color inside\n\n`aes` uses tidy-evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrarian::shelf(ggplot2, ragg, quiet = TRUE)\n# Sample data\ndf <- data.frame(\n  a = seq(0, 100, by = 10),\n  b = seq(100, 200, by = 10)\n)\n\n# Your base plot\nbase_plot <- ggplot(data.frame(x = rnorm(100)), aes(x)) +\n  geom_density() +\n  theme_minimal()\n\n# Create the plot\nplot <- base_plot + geom_function(\n  fun = dnorm,\n  show.legend = TRUE,\n  aes(color = \"ATK\"),\n  colour = \"blue\"\n) + scale_colour_manual(name = \"Legend\", values = c(\"Line\" = \"red\"))\n\n# Display the plot\nprint(plot)\n```\n\n::: {.cell-output-display}\n![](ggplot2_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nWhy is the plot not displaying the legend with a red color ?\n\n> ChatGPT:\n> The issue you're encountering with the legend not displaying the color red and the legend being removed when you include the colour = \"blue\" argument in the geom_function is related to how aesthetics are mapped in ggplot2.\n> When you use aes(color = \"line\"), you are mapping the color aesthetic to a constant string \"line\", which means that all the points or lines will have the same color, and that color will be determined by the color scale associated with the \"line\" category.\n> However, when you include colour = \"blue\" within the geom_function, you are effectively overriding the color aesthetic that you set with aes(color = \"line\"). This means that all elements drawn by this specific geom_function will be colored in blue, and ggplot2 will not create a legend because there's no mapping of aesthetics that varies.\n> If you want to specify a different color for this specific geom_function and still have a legend, you can do the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot + \n  geom_function(\n    fun = dnorm,\n    aes(color = \"line\"),\n    show.legend = TRUE\n  ) +\n  scale_colour_manual(\n    name = \"Legend\",\n    values = c(\"line\" = \"red\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nMore information : \n[Indirectly referring to a variable](https://ggplot2-book.org/programming#indirectly-referring-to-variables)\n\n## Correct automatic brackets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install ggpubr package\nlibrarian::shelf(ggpubr, tidyr, quiet = TRUE)\n\n# Create some dummy data\nset.seed(123)\ngroup1 <- rnorm(10, mean = 5, sd = 1)\ngroup2 <- rnorm(10, mean = 7, sd = 2)\ngroup3 <- rnorm(10, mean = 9, sd = 3)\n\n# Combine the data into a data frame\ndata <- data.frame(group1, group2, group3) %>%\n  pivot_longer(cols = everything(), names_to = \"group\")\n\n# Note that ggpubr works for tidy data, hence using pivot_longer()\n\n# Create the plot\nplot <- ggboxplot(data,\n  x = \"group\",\n  y = \"value\",\n  width = 0.5,\n  fill = \"group\",\n  add = \"jitter\"\n)\nplot + stat_compare_means(method = \"anova\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nNow let's add some brackets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that ggpubr seems to also load rstatix\nlibrarian::shelf(rstatix, quiet = TRUE)\n\n# Here is how you can add brackets with P values in your plot:\naov_results <- suppressWarnings(anova_test(value ~ group, data = data))\nif (aov_results$p <= 0.05) {\n  tukey_test <- tukey_hsd(data, value ~ group) %>% add_y_position()\n  plot + stat_pvalue_manual(tukey_test, label = \"P = {p.adj}\")\n}\n```\n\n::: {.cell-output-display}\n![](ggplot2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Note that it is recommended to use an italic *P* in uppercase. I don't think\n# this is possible in an R code, so a simple uppercase P should suffice. However\n# now the problem is that the automatic p for the anova test is in lowercase.\n```\n:::\n\n\nIn the\n[datanovia](https://www.datanovia.com/en/blog/ggpubr-how-to-add-p-values-generated-elsewhere-to-a-ggplot/)\nexample, you see `add_xy_position()` used, however that can mess up the\norder of the brackets. Instead, stick with add_y_position, as the x\npositions can be already determined in some functions. Here both\nfunctions work however. Perhaps rstatix got updated ? This was\ndocumented in this [git\nissue](https://github.com/kassambara/ggpubr/issues/477#issue-1289858095).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntukey_hsd(data, value ~ group) -> test\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Alternatively with P symbols (not recommended anymore):\n    # From ?stat_compare_means()\n    symnum.args <-\n      list(\n        cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, Inf),\n        symbols = c(\"****\", \"***\", \"**\", \"*\", \"ns\")\n      )\n    # Brackets for anova would not work, so you need another test\n    my_comparisons <-\n      list(\n        c(\"group1\", \"group2\"),\n        c(\"group2\", \"group3\"),\n        c(\"group1\", \"group3\")\n      )\n    plot + stat_compare_means(\n      method = \"wilcox.test\",\n      comparisons = my_comparisons,\n      symnum.args = symnum.args\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that the following code doesn't work:\naov_results <- anova_test(value ~ group, data = data) %>%\n  tukey_hsd() %>%\n  add_xy_position()\n# Instead, don't start from anova and use the test directly:\ntukey_test <- tukey_hsd(data, value ~ group) %>% add_y_position()\n```\n:::\n",
    "supporting": [
      "ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}